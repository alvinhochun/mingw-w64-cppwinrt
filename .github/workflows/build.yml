name: Build
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  gen-src-pkg:
    name: Generate source package
    runs-on: ubuntu-22.04
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3
        with:
          path: repo

      - name: Install build tools
        run: |
          sudo apt-get install ninja-build

      - name: Generate package tree
        run: |
          ./repo/packaging/generate-package.sh "mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"

      - name: Make source tarball
        run: |
          tar czvf "mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}.tar.gz" "mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"

      - name: Upload source tarball
        uses: actions/upload-artifact@v3
        with:
          name: src
          path: mingw-w64-cppwinrt-*.tar.gz

  build-headers-only:
    name: Generate headers-only package
    runs-on: ubuntu-22.04
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - name: Fetch source tarball
        uses: actions/download-artifact@v3
        with:
          name: src

      - name: Install build tools
        run: |
          sudo apt-get install ninja-build

      - name: Build
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          echo "::group::tar xzvf \"$pkgname.tar.gz\""
          tar xzvf "$pkgname.tar.gz"
          echo "::endgroup::"
          cmake -S "$pkgname" -B "build/" \
            -DINSTALL_CPPWINRT_TOOL=OFF \
            -DINSTALL_WINDOWS_WINMD=OFF \
            -DCMAKE_INSTALL_PREFIX="$PWD/$pkgname-headers/" \
            -GNinja
          cmake --build "build/"
          cmake --install "build/"

      - name: Package
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          tar czvf "./$pkgname-headers.tar.gz" "$pkgname-headers/"

      - name: Upload headers-only package
        uses: actions/upload-artifact@v3
        with:
          name: pkg-headers
          path: mingw-w64-cppwinrt-*-headers.tar.gz

  build-win:
    name: Build Windows binary package
    needs: gen-src-pkg
    runs-on: ubuntu-22.04
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - name: Fetch source tarball
        uses: actions/download-artifact@v3
        with:
          name: src

      - name: Install build tools
        run: |
          arch=i686
          sudo apt-get install ninja-build g++-mingw-w64-${arch/_/-}
          sudo update-alternatives --set "$arch-w64-mingw32-gcc" "/usr/bin/$arch-w64-mingw32-gcc-posix"
          sudo update-alternatives --set "$arch-w64-mingw32-g++" "/usr/bin/$arch-w64-mingw32-g++-posix"

      - name: Build
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          echo "::group::tar xzvf \"$pkgname.tar.gz\""
          tar xzvf "$pkgname.tar.gz"
          echo "::endgroup::"
          cmake -S "$pkgname" -B "build/" --toolchain "$PWD/$pkgname/cppwinrt/cross-mingw-toolchain.cmake" \
            -DCMAKE_SYSTEM_PROCESSOR=i686 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-static" \
            -DCMAKE_INSTALL_PREFIX="$PWD/$pkgname-win32/" \
            -GNinja
          cmake --build "build/"
          cmake --install "build/"

      - name: Package
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          zip -r9 "./$pkgname-win32.zip" "$pkgname-win32/"

      - name: Upload Windows package
        uses: actions/upload-artifact@v3
        with:
          name: pkg-win32
          path: mingw-w64-cppwinrt-*-win32.zip

  build-linux:
    name: Build Linux x86_64 binary package
    needs: gen-src-pkg
    runs-on: ubuntu-latest
    container:
      image: ubuntu:18.04
    defaults:
      run:
        shell: bash
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - name: Fetch source tarball
        uses: actions/download-artifact@v3
        with:
          name: src

      - name: Install build tools
        run: |
          apt-get update
          apt-get -y install ninja-build gpg wget
          echo 'deb https://ppa.launchpadcontent.net/ubuntu-toolchain-r/test/ubuntu bionic main' >> /etc/apt/sources.list
          echo 'deb-src https://ppa.launchpadcontent.net/ubuntu-toolchain-r/test/ubuntu bionic main' >> /etc/apt/sources.list
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 60C317803A41BA51845E371A1E9377A2BA9EF27F
          apt-get update
          apt-get -y install gcc-11 g++-11
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10
          # update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 20
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 10
          # update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 20
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
          apt-get update
          rm /usr/share/keyrings/kitware-archive-keyring.gpg
          apt-get -y install kitware-archive-keyring
          apt-get -y install cmake

      - name: Build
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          echo "::group::tar xzvf \"$pkgname.tar.gz\""
          tar xzvf "$pkgname.tar.gz"
          echo "::endgroup::"
          cmake -S "$pkgname" -B "build/" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-static -pthread" \
            -DCMAKE_INSTALL_PREFIX="$PWD/$pkgname-linux-x86_64/" \
            -GNinja
          cmake --build "build/"
          cmake --install "build/"

      - name: Package
        run: |
          pkgname="mingw-w64-cppwinrt-${GITHUB_REF_NAME//\//_}"
          tar czvf "./$pkgname-linux-x86_64.tar.gz" "$pkgname-linux-x86_64/"

      - name: Upload Linux package
        uses: actions/upload-artifact@v3
        with:
          name: pkg-linux-x86_64
          path: mingw-w64-cppwinrt-*-linux-x86_64.tar.gz

  test-autotools-build-linux:
    name: Test autotools build on Linux
    needs: build-linux
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
    defaults:
      run:
        shell: bash
    env:
      CMAKE_COLOR_DIAGNOSTICS: 1
      CLICOLOR_FORCE: 1
    steps:
      - uses: actions/checkout@v3
        with:
          path: repo

      - name: Fetch Linux binary package
        uses: actions/download-artifact@v3
        with:
          name: pkg-linux-x86_64

      - name: Install build tools
        run: |
          pacman --noconfirm -Suuy
          pacman --needed --noconfirm -S autoconf autoconf-archive make mingw-w64-gcc 

      - name: Cross build 'hello-json' example
        run: |
          echo "::group::tar xzvf mingw-w64-cppwinrt-*-linux-x86_64.tar.gz ..."
          tar xzvf mingw-w64-cppwinrt-*-linux-x86_64.tar.gz --strip-components=1 -C /usr/x86_64-w64-mingw32
          echo "::endgroup::"
          cd repo/examples/hello-json
          autoreconf --install
          echo '#!/bin/sh' > /usr/bin/x86_64-w64-mingw32-pkg-config
          echo 'export PKG_CONFIG_LIBDIR=/usr/x86_64-w64-mingw32/lib/pkgconfig:/usr/x86_64-w64-mingw32/share/pkgconfig' >> /usr/bin/x86_64-w64-mingw32-pkg-config
          echo 'export PKG_CONFIG_PATH=${PKG_CONFIG_LIBDIR}' >> /usr/bin/x86_64-w64-mingw32-pkg-config
          echo 'pkg-config --define-prefix $@' >> /usr/bin/x86_64-w64-mingw32-pkg-config
          chmod +x /usr/bin/x86_64-w64-mingw32-pkg-config
          ./configure --host x86_64-w64-mingw32
          make
          [[ -f hello-json.exe ]]
